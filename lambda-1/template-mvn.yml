AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot API - com.pkg.lambdaone::lambda1
Globals:
  Api:
    EndpointConfiguration: REGIONAL

Resources:
  Lambda1VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.33.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  InternetGateway1:
    Type: AWS::EC2::InternetGateway

  InternetGateway1Attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref Lambda1VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Lambda1VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 172.33.0.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Lambda1VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.33.1.0/24
      MapPublicIpOnLaunch: true

  SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sec-grp-lambda1"
      GroupDescription: "Security group for lambda1"
      VpcId: !Ref Lambda1VPC

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway1Attachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway1Attachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Lambda1VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway1Attachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  Lambda1Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.pkg.lambdaone.StreamLambdaHandler::handleRequest
      Runtime: java8
      CodeUri: target/lambda1-1.0-SNAPSHOT.jar
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 30
      Policies:
        - Statement: 
          - Sid: ExecuteLambda2
            Effect: Allow
            Action: 
            - lambda:InvokeFunction
            Resource: '*' 
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup1
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

Outputs:
  Lambda1Api:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ping'
    Export:
      Name: Lambda1Api
